---
layout: post 
title: New GitHub Pages Layout, etc

links:
  ghpage: http://github.com/samba/samba.github.com
	gh_thispost: http://github.com/samba/samba.github.com/blob/master/_posts/2010-04-15-New-GitHub-Pages-Layout-etc.textile
	gh_index: http://github.com/samba/samba.github.com/blob/master/index.textile
  google: http://www.google.com/search?q=

entries:
- name: one
  value: peach
- name: two
  value: cherries
- name: three
  value: apples

---

I finally had a minute to rework my design and such. The previous draft was way too cluttered, and provided more info than most people wanted to know. 

I don't think the new draft is final, but it's an improvement. If you browse "the code":{{ page.links.ghpage }}, 
you'll see that it uses YAML more extensively to define datastructures, and then loops over them to generate content. Good stuff.

Some resources that helped me along:
* "Liquid for Designers":http://wiki.github.com/tobi/liquid/liquid-for-designers


Unfortunately this iteration has highlighted some trouble points with the GitHub Pages subsystems - 
Liquid and Jekyll, I think. First, the YAML parser is very sensitive to indentation characters; 
in particular, it seems to hate my tabs. Not nice - but I can live with it.

Far more trouble some: when using @for@ loops, it generates extra newlines - _before_ Textile 
processes it, apparently. Some frustrating results...

* The extra newlines break apart the Textile blocks, into separate parsable sections
* Each row/entry of a tables or lists then gets its own block (@<ul>@ or @<table>@)
* In some cases, it simply injects extra @<br>@ and other line/paragraph markup

You can imagine how problematic that becomes. (Examples follow.) 

Please check the following for source code:
* "How to replicate it":{{ page.links.gh_thispost }} (this post)
* "Workarounds I found":{{ page.links.gh_index }} (my GH page index)


Also note that if the issues get fixed, the examples below will suddenly render properly, and my comments will be invalid ;)

h3. List Break Example

The list below is generated automatically using a @for@ loop and Textile markup.

{% for i in page.entries %}
* {{ i.name }}
{% endfor %}


h3. Table Example

This table will have extra @<br>@ injected after @<tbody>@, and @<p>@ before @</tbody>@.

<table><tbody>{% for i in page.entries %}
	<tr><td>{{ i.name }}</td><td>"{{ i.value }}":{{ page.links.google }}{{ i.value }}</td></tr>
{% endfor %}</tbody></table>
